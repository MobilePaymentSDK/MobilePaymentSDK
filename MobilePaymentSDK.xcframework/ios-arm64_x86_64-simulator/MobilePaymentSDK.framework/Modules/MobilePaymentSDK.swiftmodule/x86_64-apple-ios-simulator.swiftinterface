// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name MobilePaymentSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CommonCrypto
import DeveloperToolsSupport
import Foundation
@_exported import MobilePaymentSDK
import PassKit
import Swift
import SwiftUI
import SystemConfiguration
import ThreeDS_SDK
import UIKit
import VideoToolbox
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobilePaymentError : ObjectiveC.NSObject, Swift.Error {
  public var domain: Swift.String
  public var code: Swift.Int
  public var userInfo: [Swift.AnyHashable : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MobilePaymentGatewayResponse : ObjectiveC.NSObject {
  public func hasErrors() -> Swift.Bool
  public func getApprovalCode() -> Swift.String?
  public func getErrorCode() -> Swift.String?
  public func getErrorMessage() -> Swift.String?
  public func getGatewayRawResponse() -> [Swift.String : Any]?
  public func getGeneratedToken() -> Swift.String?
  public func getMaskedCardNumber() -> Swift.String?
  public func getMerchantId() -> Swift.String?
  public func getPaymentMethod() -> Swift.String?
  public func getStatus() -> Swift.String?
  public func getStatusDescription() -> Swift.String?
  public func getTransactionId() -> Swift.String?
  public func getUserSavedCard() -> Swift.Bool?
  @objc deinit
}
@objc public enum MobilePaymentSDKPaymentMethod : Swift.Int {
  case visa
  case mastercard
  case mada
  case jcb
  case diners
  case unionpay
  case discovery
  case amex
  case applePay
  case paypal
  case cash
  public init?(value: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MobilePaymentType : Swift.Int {
  case sale
  case preAuth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MobileAgreementType : Swift.Int, Swift.RawRepresentable {
  case unscheduled
  case recurring
  case none
  public typealias RawValue = Swift.String
  public var rawValue: MobileAgreementType.RawValue {
    get
  }
  public init?(rawValue: MobileAgreementType.RawValue)
}
@objc public enum MobilePaymentSupportedLanguage : Swift.Int, Swift.RawRepresentable {
  case english
  case arabic
  case turkish
  public typealias RawValue = Swift.String
  public var rawValue: MobilePaymentSupportedLanguage.RawValue {
    get
  }
  public init?(rawValue: MobilePaymentSupportedLanguage.RawValue)
}
@objc public protocol MobilePaymentSDKDelegate {
  @objc func onPaymentSuccess(withTransactionId transactionId: Swift.String, infoDictionary: [Swift.String : Any], tokenizedCard: Swift.String?, shouldStoreCard: Swift.Bool)
  @objc func onPaymentError(_ error: MobilePaymentError, transactionId: Swift.String)
  @objc func onPaymentCancelled(transactionId: Swift.String)
  @objc func didTapDeleteCard(_ withToken: Swift.String)
  @objc func onPaymentCompletion(withResponse response: MobilePaymentGatewayResponse)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MobilePaymentSDK : ObjectiveC.NSObject {
  @objc public static var shared: MobilePaymentSDK
  @objc public class func initializeSDK(withMerchantID merchantID: Swift.String, secretKey key: Swift.String, delegate: (any MobilePaymentSDKDelegate)?, appleMerchantId: Swift.String? = nil) throws
  public func showPaymentPage(fromViewController viewController: UIKit.UIViewController, amount: Swift.String, currency: Swift.String, tokens: [Swift.String]?, paymentMethods: [MobilePaymentSDKPaymentMethod], transactionId: Swift.String, paymentType: MobilePaymentType, is3DSAuth: Swift.Bool, shouldTokenizeCard: Swift.Bool, isCardScanningEnabled: Swift.Bool, language: MobilePaymentSupportedLanguage, paymentDescription: Swift.String = "", paymentTitle: Swift.String = "", quantity: Swift.String? = nil, itemId: Swift.String? = nil, agreementId: Swift.String? = nil, agreementType: MobileAgreementType = .none)
  @objc public func getInquiry(forTransactionId transactionId: Swift.String)
  @objc public func requestForPaymentCompletion(forOriginalTransactionId ogTransactionId: Swift.String, forTransactionId transactionId: Swift.String, forIsoCountry countryIso: Swift.String, forAmount amount: Swift.String)
  @objc public func requestForPaymentRefund(forOriginalTransactionId ogTransactionId: Swift.String, forTransactionId transactionId: Swift.String, forIsoCountry countryIso: Swift.String, forAmount amount: Swift.String)
  @objc public func requestForPaymentApprove(forOriginalTransactionId ogTransactionId: Swift.String, forTransactionId transactionId: Swift.String, forIsoCountry countryIso: Swift.String, forAmount amount: Swift.String, forCardHolderName name: Swift.String, forCardNumber cardNumber: Swift.String, forSecurityCode code: Swift.String, forExpiryYear year: Swift.String, forExpiryMonth month: Swift.String, forPaymentAuthenticationResponse pares: Swift.String)
  @objc deinit
}
infix operator =~ : DefaultPrecedence
infix operator !~ : DefaultPrecedence
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class EasyTipView : UIKit.UIView {
  public enum ArrowPosition : Swift.Sendable {
    case any
    case top
    case bottom
    case right
    case left
    public static func == (a: EasyTipView.ArrowPosition, b: EasyTipView.ArrowPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Preferences {
    public struct Drawing {
      public var cornerRadius: CoreFoundation.CGFloat
      public var arrowHeight: CoreFoundation.CGFloat
      public var arrowWidth: CoreFoundation.CGFloat
      public var foregroundColor: UIKit.UIColor
      public var backgroundColor: UIKit.UIColor
      public var arrowPosition: EasyTipView.ArrowPosition
      public var textAlignment: UIKit.NSTextAlignment
      public var borderWidth: CoreFoundation.CGFloat
      public var borderColor: UIKit.UIColor
      public var font: UIKit.UIFont
      public var shadowColor: UIKit.UIColor
      public var shadowOffset: CoreFoundation.CGSize
      public var shadowRadius: CoreFoundation.CGFloat
      public var shadowOpacity: CoreFoundation.CGFloat
    }
    public struct Positioning {
      public var bubbleInsets: UIKit.UIEdgeInsets
      public var contentInsets: UIKit.UIEdgeInsets
      public var maxWidth: CoreFoundation.CGFloat
    }
    public struct Animating {
      public var dismissTransform: CoreFoundation.CGAffineTransform
      public var showInitialTransform: CoreFoundation.CGAffineTransform
      public var showFinalTransform: CoreFoundation.CGAffineTransform
      public var springDamping: CoreFoundation.CGFloat
      public var springVelocity: CoreFoundation.CGFloat
      public var showInitialAlpha: CoreFoundation.CGFloat
      public var dismissFinalAlpha: CoreFoundation.CGFloat
      public var showDuration: Swift.Double
      public var dismissDuration: Swift.Double
      public var dismissOnTap: Swift.Bool
    }
    public var drawing: EasyTipView.Preferences.Drawing
    public var positioning: EasyTipView.Preferences.Positioning
    public var animating: EasyTipView.Preferences.Animating
    public var hasBorder: Swift.Bool {
      get
    }
    public var hasShadow: Swift.Bool {
      get
    }
    public init()
  }
  public enum Content : Swift.CustomStringConvertible {
    case text(Swift.String)
    case attributedText(Foundation.NSAttributedString)
    case view(UIKit.UIView)
    public var description: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency open var preferences: EasyTipView.Preferences {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static var globalPreferences: EasyTipView.Preferences
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
}
@_hasMissingDesignatedInitializers public class MobilePaymentConstants {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 13, *)
@_Concurrency.MainActor @preconcurrency open class CreditCardScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var titleLabelText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var subtitleLabelText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var cancelButtonTitleText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var cancelButtonTitleTextColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var labelTextColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var textBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var cameraViewCreditCardFrameStrokeColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var cameraViewMaskLayerColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var cameraViewMaskAlpha: CoreFoundation.CGFloat
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (Reachability) -> ()
  public typealias NetworkUnreachable = (Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.NetworkStatus, b: Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Reachability.Connection, b: Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: Reachability.NetworkReachable?
  public var whenUnreachable: Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: Reachability.Connection {
    get
  }
  public var connection: Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension MobilePaymentSDKPaymentMethod : Swift.Equatable {}
extension MobilePaymentSDKPaymentMethod : Swift.Hashable {}
extension MobilePaymentSDKPaymentMethod : Swift.RawRepresentable {}
extension MobilePaymentType : Swift.Equatable {}
extension MobilePaymentType : Swift.Hashable {}
extension MobilePaymentType : Swift.RawRepresentable {}
extension MobileAgreementType : Swift.Equatable {}
extension MobileAgreementType : Swift.Hashable {}
extension MobilePaymentSupportedLanguage : Swift.Equatable {}
extension MobilePaymentSupportedLanguage : Swift.Hashable {}
extension EasyTipView.ArrowPosition : Swift.Equatable {}
extension EasyTipView.ArrowPosition : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension Reachability.NetworkStatus : Swift.Hashable {}
extension Reachability.Connection : Swift.Equatable {}
extension Reachability.Connection : Swift.Hashable {}
